;;; my_ligatures.el --- add ligatures support for JetBrains Mono font
;;; Commentary:
;;; This feature is still unstable

;;; Code:

(require 'composite)
(defun setup-ligatures ()
  "Setup JetBrains Mono font ligatures."
  (let ((alist '((?! . "\\(?:!\\(?:==\\|[!=]\\)\\)")
                 (?# . "\\(?:#\\(?:###?\\|_(\\|[!#(:=?[_{]\\)\\)")
                 (?$ . "\\(?:\\$>\\)")
                 (?& . "\\(?:&&&?\\)")
                 (?* . "\\(?:\\*\\(?:\\*\\*\\|[/>]\\)\\)")
                 (?+ . "\\(?:\\+\\(?:\\+\\+\\|[+>]\\)\\)")
                 (?- . "\\(?:-\\(?:-[>-]\\|<<\\|>>\\|[<>|~-]\\)\\)")
                 (?. . "\\(?:\\.\\(?:\\.[.<]\\|[.=?-]\\)\\)")
                 (?/ . "\\(?:/\\(?:\\*\\*\\|//\\|==\\|[*/=>]\\)\\)")
                 (?: . "\\(?::\\(?:::\\|\\?>\\|[:<-?]\\)\\)")
                 (?\; . "\\(?:;;\\)")
                 (?< . "\\(?:<\\(?:!--\\|\\$>\\|\\*>\\|\\+>\\|-[<>|]\\|/>\\|<[<=-]\\|=\\(?:=>\\|[<=>|]\\)\\||\\(?:||::=\\|[>|]\\)\\|~[>~]\\|[$*+/:<=>|~-]\\)\\)")
                 (?= . "\\(?:=\\(?:!=\\|/=\\|:=\\|=[=>]\\|>>\\|[=>]\\)\\)")
                 (?> . "\\(?:>\\(?:=>\\|>[=>-]\\|[]:=-]\\)\\)")
                 (?? . "\\(?:\\?[.:=?]\\)")
                 (?\[ . "\\(?:\\[\\(?:||]\\|[<|]\\)\\)")
                 (?\ . "\\(?:\\\\/?\\)")
                 (?\] . "\\(?:]#\\)")
                 (?^ . "\\(?:\\^=\\)")
                 (?_ . "\\(?:_\\(?:|?_\\)\\)")
                 (?{ . "\\(?:{|\\)")
                 (?| . "\\(?:|\\(?:->\\|=>\\||\\(?:|>\\|[=>-]\\)\\|[]=>|}-]\\)\\)")
                 (?~ . "\\(?:~\\(?:~>\\|[=>@~-]\\)\\)"))))
    (dolist (char-regexp alist)
      (set-char-table-range composition-function-table (car char-regexp)
                            `([,(cdr char-regexp) 0 font-shape-gstring])))))

(provide 'my_ligatures)
;;; my_ligatures.el ends here
